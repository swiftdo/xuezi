// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';
import 'package:xuezi/domain/entities/learned_character.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

/// ObjectBox model definition for Dart.
///
/// Model can be loaded in two ways:
/// 1. When build by ObjectBox Generator (most common way), it is stored in a
///    static `buildSchema()` function in the generated objectbox.g.dart file.
/// 2. Model can also be loaded from JSON, e.g. when the model is defined in a
///    different language than Dart.
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
    entities: [
      ModelEntity(
        id: const IdUid(1, 8736190159016595456),
        name: 'LearnedCharacter',
        lastPropertyId: const IdUid(2, 2339439507934543872),
        flags: 0,
        properties: [
          ModelProperty(
            id: const IdUid(1, 5557637752332993536),
            name: 'id',
            type: 6,
            flags: 1,
          ),
          ModelProperty(
            id: const IdUid(2, 2339439507934543872),
            name: 'character',
            type: 9,
            flags: 0,
          ),
        ],
        relations: [],
        backlinks: [],
      ),
    ],
    lastEntityId: const IdUid(1, 8736190159016595456),
    lastIndexId: const IdUid(0, 0),
    lastRelationId: const IdUid(0, 0),
    lastSequenceId: const IdUid(0, 0),
    retiredEntityUids: [],
    retiredIndexUids: [],
    retiredPropertyUids: [],
    retiredRelationUids: [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, EntityDefinition>{};
  bindings[LearnedCharacter] = EntityDefinition<LearnedCharacter>(
    model: _entities[0],
    toOneRelations: (LearnedCharacter object) => [],
    toManyRelations: (LearnedCharacter object) => {},
    getId: (LearnedCharacter object) => object.id,
    setId: (LearnedCharacter object, int id) {
      object.id = id;
    },
    objectToFB: (LearnedCharacter object, fb.Builder fbb) {
      final characterOffset = fbb.writeString(object.character);
      fbb.startTable(3);
      fbb.addInt64(0, object.id);
      fbb.addOffset(1, characterOffset);
      fbb.finish(fbb.endTable());
      return object.id;
    },
    objectFromFB: (Store store, ByteData fbData) {
      final buffer = fb.BufferContext(fbData);
      final rootOffset = buffer.derefObject(0);

      final object = LearnedCharacter(
        character: const fb.StringReader(asciiOptimization: true)
            .vTableGet(buffer, rootOffset, 6, ''),
      );
      object.id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

      return object;
    },
  );
  return ModelDefinition(model, bindings);
}

/// [LearnedCharacter] entity fields to define ObjectBox queries.
class LearnedCharacter_ {
  /// see [LearnedCharacter.id]
  static final id =
      QueryIntegerProperty<LearnedCharacter>(_entities[0].properties[0]);

  /// see [LearnedCharacter.character]
  static final character =
      QueryStringProperty<LearnedCharacter>(_entities[0].properties[1]);
}

/// [LearnedCharacter] entity model.
final _entities = <ModelEntity>[
  ModelEntity(
    id: const IdUid(1, 8736190159016595456),
    name: 'LearnedCharacter',
    lastPropertyId: const IdUid(2, 2339439507934543872),
    flags: 0,
    properties: [
      ModelProperty(
        id: const IdUid(1, 5557637752332993536),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      ModelProperty(
        id: const IdUid(2, 2339439507934543872),
        name: 'character',
        type: 9,
        flags: 0,
      ),
    ],
    relations: [],
    backlinks: [],
  ),
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}
